2) Create a logging system that saves log files into log/
4) Print only errors to the screen
	1) Count the number of that type of error
5) Change arm_seg['len']'s based on solid measurments of the arm segments
6) Make scoop vectorable (Currently it is only open or closed)
7) Have gui.py launch the GPS module
8) Clean up orphaned threads
9) Make a list of types of packet data to be expected
10) Write intToArmByte to change a 0-360 degree angle into a Byte data
11) Add Camera select to GUI
12) Adjust package states so that 5 bytes do not need to be sent all the time
13) 
14) Fix data format for the following
	1) Vector Mode: Velocity and Angle
	2) Zero Mode: Angles are again too shallow, just simply not correct
	3) Tripod: Zoom
XXXX4) Wrist: Tilt
15) Make a record for the data format
16) Currently, in Vector mode, velocity only works at angle 0, and after velocity does not... also at that time angles show up but only go from 254 < angle < 2
17) Add Zero-Radius Button to Drive



DONE:
1) Set Arm control limits AKA stops in Interface
2) Allow control and assemble/send packets of Arm
3) Allow control and assemble/send packets of Tripod
4) Allow control and assemble/send packets of MUX
5) Allow control and assemble/send packets of Packages
6) Allow control and assemble/send packets of Soil Probe
7) See if there is an issue with roverpacket assembly
8) Clear up all remaining print statements
9) Remove angle_overflow for wrist tilt (just use bogie configuration)