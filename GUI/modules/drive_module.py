                #!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Sun Dec 30 10:58:23 2012, then painstakingly hand-edited

import wx
import math


class DriveControls(wx.Panel):
    def __init__(self, parent, driveSim, roverStatus):

        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY, size=(320, 250), style=wx.BORDER_SUNKEN)

        self.parent = parent

        self.driveSim = driveSim

        titleFont = wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD)
        subTitleFont = wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD)

        self.Bind(wx.EVT_PAINT, self.OnPaint)

        self.roverStatus = roverStatus

        self.throttle = wx.Slider(
            self, value=self.roverStatus.throttle, minValue=0, maxValue=100, size=(200, -1), style=wx.SL_HORIZONTAL)
        self.angle = wx.Slider(self, value=math.degrees(
            self.roverStatus.angle), minValue=-90, maxValue=90, size=(200, -1), style=wx.SL_HORIZONTAL)

        self.throttle.Bind(wx.EVT_SCROLL, self.ChangeThrottleValue)
        self.angle.Bind(wx.EVT_SCROLL, self.ChangeAngleValue)

        self.spinCtrlThrottle = wx.SpinCtrl(self, value="%d" % self.roverStatus.throttle, size=(55, -1))
        self.spinCtrlThrottle.SetRange(0, 100)
        self.spinCtrlThrottle.Bind(wx.EVT_SPINCTRL, self.ChangeThrottleValue)

        self.spinCtrlAngle = wx.SpinCtrl(self, value="%d" % math.degrees(self.roverStatus.angle), size=(55, -1))
        self.spinCtrlAngle.SetRange(-90, 90)
        self.spinCtrlAngle.Bind(wx.EVT_SPINCTRL, self.ChangeAngleValue)

        # self.zeroPtTurn = wx.Button(self, label="Zero Point Turn")
        # self.zeroPtTurn.Bind(wx.EVT_BUTTON, self.ZeroPtTurn)

        self.stDriveControls = wx.StaticText(self, label="Drive Controls")
        self.stDriveControls.SetFont(titleFont)
        self.stThrottle = wx.StaticText(self, label="Throttle")
        self.stAngle = wx.StaticText(self, label="Angle")
        self.stDriveMode = wx.StaticText(self, label="Drive Mode")
        self.stDriveMode.SetFont(subTitleFont)

        self.rbZeroRadius = wx.RadioButton(self, label="Zero Radius", style=wx.RB_GROUP)
        self.rbVector = wx.RadioButton(self, label="Vector")
        self.rbExplicit = wx.RadioButton(self, label="Explicit")
        self.rbIndependent = wx.RadioButton(self, label="Independent")
        self.rbTank = wx.RadioButton(self, label="Tank")

        self.rbZeroRadius.Bind(wx.EVT_RADIOBUTTON, self.ChangeMode)
        self.rbVector.Bind(wx.EVT_RADIOBUTTON, self.ChangeMode)
        self.rbExplicit.Bind(wx.EVT_RADIOBUTTON, self.ChangeMode)
        self.rbIndependent.Bind(wx.EVT_RADIOBUTTON, self.ChangeMode)
        self.rbTank.Bind(wx.EVT_RADIOBUTTON, self.ChangeMode)

        self.Center()
        self.__do_layout()

    def OnPaint(self, event):
        self.spinCtrlThrottle.SetValue(self.roverStatus.throttle)
        self.throttle.SetValue(self.roverStatus.throttle)
        self.spinCtrlAngle.SetValue(-math.degrees(self.roverStatus.angle))
        self.angle.SetValue(-math.degrees(self.roverStatus.angle))

        if self.roverStatus.drive_mode == 'zeroRadius':
            self.rbZeroRadius.SetValue(True)
        elif self.roverStatus.drive_mode == 'vector':
            self.rbVector.SetValue(True)
        elif self.roverStatus.drive_mode == 'explicit':
            self.rbExplicit.SetValue(True)
        elif self.roverStatus.drive_mode == 'independent':
            self.rbIndependent.SetValue(True)
        elif self.roverStatus.drive_mode == 'tank':
            self.rbTank.SetValue(True)
        print "Joystatus"
        print self.roverStatus.joy_states
        print "Joystatus"

    def ChangeThrottleValue(self, event):
        obj = event.GetEventObject()
        self.roverStatus.throttle = obj.GetValue()

        self.spinCtrlThrottle.SetValue(self.roverStatus.throttle)
        self.throttle.SetValue(self.roverStatus.throttle)
        self.parent.Refresh()
        self.driveSim.Refresh()

    def ChangeAngleValue(self, event):
        obj = event.GetEventObject()
        self.roverStatus.SetAngle(-obj.GetValue())

        self.spinCtrlAngle.SetValue(-math.degrees(self.roverStatus.angle))
        self.angle.SetValue(-math.degrees(self.roverStatus.angle))

        self.parent.Refresh()

    # def ZeroPtTurn(self, event):
    #    print("Zero Point Turn")

    def ChangeMode(self, event):
        obj = event.GetEventObject()

        if obj == self.rbZeroRadius:
            self.roverStatus.drive_mode = 'zeroRadius'
        elif obj == self.rbVector:
            self.roverStatus.drive_mode = 'vector'
        elif obj == self.rbExplicit:
            self.roverStatus.drive_mode = 'explicit'
        elif obj == self.rbIndependent:
            self.roverStatus.drive_mode = 'independent'
        elif obj == self.rbTank:
            self.roverStatus.drive_mode = 'tank'

        print "drive mode: ", self.roverStatus.drive_mode
        self.parent.Refresh()

    def __do_layout(self):
        gridSizer = wx.FlexGridSizer(8, 1, 3, 3)

        gridSizer.Add(self.stDriveControls, flag=wx.ALIGN_CENTER)
        gridSizer.Add(self.stAngle, flag=wx.ALIGN_CENTER)

        hSizerAngle = wx.BoxSizer(wx.HORIZONTAL)

        hSizerAngle.Add(self.angle)
        hSizerAngle.Add(self.spinCtrlAngle)

        gridSizer.Add(hSizerAngle, flag=wx.ALIGN_CENTER)
        gridSizer.Add(self.stThrottle, flag=wx.ALIGN_CENTER)

        hSizerThrot = wx.BoxSizer(wx.HORIZONTAL)

        hSizerThrot.Add(self.throttle)
        hSizerThrot.Add(self.spinCtrlThrottle)

        gridSizer.Add(hSizerThrot, flag=wx.ALIGN_CENTER)

        hSizerAngle = wx.BoxSizer(wx.HORIZONTAL)

        gridSizer.Add(wx.StaticText(self))
        # gridSizer.Add(self.zeroPtTurn, (7, 1), flag=wx.EXPAND)
        gridSizer.Add(self.stDriveMode, flag=wx.ALIGN_CENTER)

        hSizerRBTop = wx.BoxSizer(wx.HORIZONTAL)

        hSizerRBTop.Add(self.rbZeroRadius)
        hSizerRBTop.Add(self.rbVector)
        hSizerRBTop.Add(self.rbExplicit)

        hSizerRBBot = wx.BoxSizer(wx.HORIZONTAL)

        hSizerRBBot.Add(self.rbIndependent)
        hSizerRBBot.Add(self.rbTank)

        gridSizer.Add(hSizerRBTop, flag=wx.ALIGN_CENTER)
        gridSizer.Add(hSizerRBBot, flag=wx.ALIGN_CENTER)

        gridSizer.AddGrowableCol(0, 0)

        self.SetSizer(gridSizer)
        self.Layout()
